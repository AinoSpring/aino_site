"""
Django settings for aino_site project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from dotenv import load_dotenv
import os

import pygments.formatters


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / ".env")
get_env = os.environ.get

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
debug = get_env("DJANGO_DEBUG")
DEBUG = debug is None or debug.lower() == "true"

ALLOWED_HOSTS = ["*"]

# Pages config
POSTS_PER_PAGE = 5

WORDS_PER_MINUTE = 200

# Markdown

PYGMENTS_CSS_CLASS = "source-code-highlight"
PYGMENTS_HIGHTLIGHT_THEME = "gruvbox-dark"  # https://pygments.org/styles/
PYGMENTS_FORMATTER = pygments.formatters.HtmlFormatter(
        cssclass=PYGMENTS_CSS_CLASS,
        style=PYGMENTS_HIGHTLIGHT_THEME,
        linenos="inline",
        wrapcode=True
        )

MARKDOWNX_UPLOAD_CONTENT_TYPES = []
MARKDOWNX_MARKDOWN_EXTENSIONS = [
        "extra",
        "fenced_code",
        "codehilite",
        "mdx_math",
        "pymdownx.emoji",
        "md_ext.image"
        ]
MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS = {
        "codehilite": {
            "pygments_formatter": lambda *_args, **_kwargs: PYGMENTS_FORMATTER
            }
        }


# Application definition

INSTALLED_APPS = [
        "compressor",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "markdownx",
        "pages.apps.PagesConfig",
        ]

MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        ]

ROOT_URLCONF = "aino_site.urls"

TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "pages.context_processors.load_nav_obj",
                    "pages.context_processors.load_contact",
                    "pages.context_processors.load_sites"
                    ],
                },
            },
        ]

WSGI_APPLICATION = "aino_site.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": get_env("DJANGO_DB_NAME"),
            "USER": get_env("DJANGO_DB_USER"),
            "PASSWORD": get_env("DJANGO_DB_PASSWORD"),
            "HOST": get_env("DJANGO_DB_HOST"),
            "PORT": get_env("DJANGO_DB_PORT")
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
            },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
            },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
            },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
            },
        ]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "CET"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
        BASE_DIR / "static",
        ]

STATICFILES_FINDERS = [
        "django.contrib.staticfiles.finders.FileSystemFinder",
        "django.contrib.staticfiles.finders.AppDirectoriesFinder",
        "compressor.finders.CompressorFinder",
        ]

COMPRESS_PRECOMPILERS = (
        ("text/x-scss", "django_libsass.SassCompiler"),
        )

COMPRESS_ENABLED = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
